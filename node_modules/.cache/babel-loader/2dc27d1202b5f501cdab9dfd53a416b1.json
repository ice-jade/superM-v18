{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nlet cart = [];\n\ntry {\n  cart = JSON.parse(localStorage.getItem(\"cart\")) || [];\n} catch (error) {\n  cart = [];\n}\n\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState: {\n    cart\n  },\n  reducers: {\n    addProduct: (state, action) => {\n      const oldProduct = state.cart.find(product => product.id === action.payload.id);\n\n      if (oldProduct) {\n        oldProduct.quantity += 1;\n      } else {\n        state.cart.push({ ...action.payload,\n          quantity: 1\n        });\n      }\n    },\n    removeProduct: (state, action) => {\n      const index = state.cart.findIndex(product => product.id === action.payload.id);\n\n      if (index !== -1) {\n        state.cart.splice(index, 1); // toolkit引入了immer，支持mutable写法\n      }\n    },\n    clearProduct: (state, action) => {\n      state.cart = [];\n    }\n  }\n});\n\nconst cartCountSelector = state => {\n  // TODO: return the total number of items in the cart\n  return state.cart.reduce((total, product) => total += product.quantity, 0);\n};\n\nconst cartValueSelector = state => {\n  return state.cart.reduce((total, current) => total += current.quantity * current.price, 0);\n};\n\nconst cartReducer = cartSlice.reducer;\nconst {\n  addProduct,\n  removeProduct,\n  clearProduct\n} = cartSlice.actions;\nexport { cartReducer, addProduct, removeProduct, clearProduct, cartCountSelector, cartValueSelector };","map":{"version":3,"sources":["D:/computer knowledge/web-learning/learn-js-online/learn-react-project/superm-solution-react-18/src/redux/cart_slice.js"],"names":["createSlice","cart","JSON","parse","localStorage","getItem","error","cartSlice","name","initialState","reducers","addProduct","state","action","oldProduct","find","product","id","payload","quantity","push","removeProduct","index","findIndex","splice","clearProduct","cartCountSelector","reduce","total","cartValueSelector","current","price","cartReducer","reducer","actions"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEE,IAAIC,IAAI,GAAG,EAAX;;AACA,IAAI;AACFA,EAAAA,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,KAA4C,EAAnD;AACD,CAFD,CAEE,OAAOC,KAAP,EAAc;AACdL,EAAAA,IAAI,GAAG,EAAP;AACD;;AAGH,MAAMM,SAAS,GAAGP,WAAW,CAAC;AAC5BQ,EAAAA,IAAI,EAAE,MADsB;AAE5BC,EAAAA,YAAY,EAAE;AACZR,IAAAA;AADY,GAFc;AAK5BS,EAAAA,QAAQ,EAAE;AACRC,IAAAA,UAAU,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC7B,YAAMC,UAAU,GAAGF,KAAK,CAACX,IAAN,CAAWc,IAAX,CAAgBC,OAAO,IAAIA,OAAO,CAACC,EAAR,KAAeJ,MAAM,CAACK,OAAP,CAAeD,EAAzD,CAAnB;;AACA,UAAIH,UAAJ,EAAgB;AACdA,QAAAA,UAAU,CAACK,QAAX,IAAuB,CAAvB;AACD,OAFD,MAEO;AACLP,QAAAA,KAAK,CAACX,IAAN,CAAWmB,IAAX,CAAgB,EAAC,GAAGP,MAAM,CAACK,OAAX;AAAoBC,UAAAA,QAAQ,EAAE;AAA9B,SAAhB;AACD;AACF,KARO;AAURE,IAAAA,aAAa,EAAE,CAACT,KAAD,EAAQC,MAAR,KAAmB;AAChC,YAAMS,KAAK,GAAGV,KAAK,CAACX,IAAN,CAAWsB,SAAX,CAAsBP,OAAD,IAAaA,OAAO,CAACC,EAAR,KAAeJ,MAAM,CAACK,OAAP,CAAeD,EAAhE,CAAd;;AACA,UAAIK,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChBV,QAAAA,KAAK,CAACX,IAAN,CAAWuB,MAAX,CAAkBF,KAAlB,EAAyB,CAAzB,EADgB,CACa;AAC9B;AACF,KAfO;AAiBRG,IAAAA,YAAY,EAAE,CAACb,KAAD,EAAQC,MAAR,KAAmB;AAC/BD,MAAAA,KAAK,CAACX,IAAN,GAAa,EAAb;AACD;AAnBO;AALkB,CAAD,CAA7B;;AA4BA,MAAMyB,iBAAiB,GAAId,KAAD,IAAW;AAAG;AACtC,SAAOA,KAAK,CAACX,IAAN,CAAW0B,MAAX,CAAmB,CAACC,KAAD,EAAQZ,OAAR,KAAqBY,KAAK,IAAIZ,OAAO,CAACG,QAAzD,EAAmE,CAAnE,CAAP;AACD,CAFD;;AAIA,MAAMU,iBAAiB,GAAIjB,KAAD,IAAW;AACnC,SAAOA,KAAK,CAACX,IAAN,CAAW0B,MAAX,CAAmB,CAACC,KAAD,EAAQE,OAAR,KAAoBF,KAAK,IAAIE,OAAO,CAACX,QAAR,GAAmBW,OAAO,CAACC,KAA3E,EAAkF,CAAlF,CAAP;AACD,CAFD;;AAIA,MAAMC,WAAW,GAAGzB,SAAS,CAAC0B,OAA9B;AACA,MAAM;AAAEtB,EAAAA,UAAF;AAAcU,EAAAA,aAAd;AAA6BI,EAAAA;AAA7B,IAA8ClB,SAAS,CAAC2B,OAA9D;AAEA,SAASF,WAAT,EAAsBrB,UAAtB,EAAkCU,aAAlC,EAAiDI,YAAjD,EAA+DC,iBAA/D,EAAkFG,iBAAlF","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\n  let cart = [];\r\n  try {\r\n    cart = JSON.parse(localStorage.getItem(\"cart\")) || [];\r\n  } catch (error) {\r\n    cart = [];\r\n  }\r\n\r\n\r\nconst cartSlice = createSlice({\r\n  name: \"cart\",\r\n  initialState: {\r\n    cart,\r\n  },\r\n  reducers: {\r\n    addProduct: (state, action) => {     \r\n      const oldProduct = state.cart.find(product => product.id === action.payload.id)\r\n      if (oldProduct) {\r\n        oldProduct.quantity += 1;\r\n      } else {\r\n        state.cart.push({...action.payload, quantity: 1})\r\n      }\r\n    },\r\n\r\n    removeProduct: (state, action) => {\r\n      const index = state.cart.findIndex((product) => product.id === action.payload.id);\r\n      if (index !== -1) {\r\n        state.cart.splice(index, 1); // toolkit引入了immer，支持mutable写法\r\n      }\r\n    },\r\n\r\n    clearProduct: (state, action) => {\r\n      state.cart = [];\r\n    }\r\n  }\r\n});\r\n\r\nconst cartCountSelector = (state) => {  // TODO: return the total number of items in the cart\r\n  return state.cart.reduce( (total, product) =>  total += product.quantity, 0 );\r\n};\r\n\r\nconst cartValueSelector = (state) => {\r\n  return state.cart.reduce( (total, current) => total += current.quantity * current.price, 0 );\r\n};\r\n\r\nconst cartReducer = cartSlice.reducer;\r\nconst { addProduct, removeProduct, clearProduct } = cartSlice.actions;\r\n\r\nexport { cartReducer, addProduct, removeProduct, clearProduct, cartCountSelector, cartValueSelector };"]},"metadata":{},"sourceType":"module"}